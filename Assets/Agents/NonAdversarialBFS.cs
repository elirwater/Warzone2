using System.Collections.Generic;
using System.Linq;

/**
 * Class for representing the Non-Adversarial BFS Agent (can only play by itself)
 * This agent is also capable of attacking multiple territories per round
 */
public class NonAdversarialBFS : Agents
{
    
    private List<(Territories, List<Territories>)> BFSFrontsPerRound = new List<(Territories, List<Territories>)>();

    public NonAdversarialBFS()
    {
        agentName = "BFSAgent";
    }
    
    
    public override List<DeployMoves> generateDeployMoves()
    {
        // We check if its the first round, and then populate our list of territories to visit by using BFS
        if (BFSFrontsPerRound.Count == 0 && territories.Count == 1)
        {
            // Run DFS with our starting node (starting territory)
            BFS(territories[0]);
        }
        
        // Now, in order to get a more BFS style agent (breadth), instead of attacking/deploying on on territory per round, 
        // we deploy and attack on the entire front generated by BFS from the starting node of that specific part of the graph
        List<DeployMoves> moves = new List<DeployMoves>();
        DeployMoves move = new DeployMoves(BFSFrontsPerRound[0].Item1.territoryName, armies);
        moves.Add(move);
        return moves;
    }
    

    public override List<AttackMoves> generateAttackMoves()
    {
        //We wait until the starting territory has enough armies to conquer all of its neighbors from the BFS search
        int requiredArmies = 0;
        foreach (Territories frontline in BFSFrontsPerRound[0].Item2)
        {
            requiredArmies += frontline.armies;
        }

        List<AttackMoves> moves = new List<AttackMoves>();
        if (BFSFrontsPerRound[0].Item1.armies >= requiredArmies)
        {
            foreach (Territories frontline in BFSFrontsPerRound[0].Item2)
            {   
                AttackMoves move = new AttackMoves(BFSFrontsPerRound[0].Item1.territoryName, frontline.territoryName,
                    frontline.armies);
                moves.Add(move);
            }
            BFSFrontsPerRound.RemoveAt(0);
        }
        return moves;

    }
    
    /**
     * Generates the list of territories to visit in the order BFS found them
     */
    private void BFS(Territories territory)
    {
        List<Territories> visited = new List<Territories>();
        visited.Add(territory);
        
        LinkedList<Territories> queue = new LinkedList<Territories>();
        queue.AddLast(territory);
        
        while (queue.Any())
        {
            Territories vertex = queue.First();
            queue.RemoveFirst();
        
            (Territories, List<Territories>) roundFront = (vertex, new List<Territories>());
            
            foreach (string neighborName in vertex.neighbors)
            {
                Territories t = agentGameState.getTerritoryByName(neighborName);
                if (!visited.Contains(t))
                {
                    queue.AddLast(t);
                    visited.Add(t);
                    roundFront.Item2.Add(t);
                }
            }
            BFSFrontsPerRound.Add(roundFront);
        }
    }
}